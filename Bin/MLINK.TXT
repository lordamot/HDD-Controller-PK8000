MOA Link v2.7
(c) 1994, 1995, 1996, 1997, 1998 MOA

Компановщик  предназначен   для  связывания   объектных  файлов   в  формате
Microsoft   для   8-ми   разрядных   процессоров   (например,    порождаемых
компиляторами  MA80,   M80,  MACRO-80).    Результаты   работы  могут   быть
использованы  как  для  запуска  программ  в  рамках системы CP/M, так и для
■прошивки■ в ПЗУ.  Компановщик позволяет размещать  коды в заранее  заданные
области памяти, помещать указанную (только одну для оверлея) область  памяти
в  файл.  По  желанию  генерируется  файл  символов  для  отладки програмы в
эмуляторах Z80MU или SPM, а также файл карты распределения памяти.

Компановщик  позволяет  создавать  оверлеи  (при  размещении этих оверлеев в
заранее  заданные  области  памяти).  Под  оверлеями  здесь понимаются части
кода, которые могут находиться  в одних и тех  же адресах памяти, и  должны,
следовательно,  выполняться  в  разное   время  (например,  при   страничной
организации памяти).  При этом  допускаются любые  виды перекрёстных  ссылок
между оверлеями.

Команды  компановщику  (имена  связываемых   файлов  и  управляющие   ключи)
задаются из  командной строки,  либо из  заранее подготовленного  текстового
файла (такой файл может быть  только один, но может совмещаться  с командами
из  командной  строки).  Все  команды  разделяются  пробелами  или символами
табуляции (а в файле ещё  и символами перевода строки), имена  файлов должны
иметь  расширение  REL,  или  явно  указываться  с  другим  расширением.  По
умолчанию (если не задано другое, см. ниже) выходной файл имеет имя  первого
связываемого в оверлее файла с раширением COM.

Файлы  связываются  компановщиком  в  том  порядке,  в котором они заданы из
командной  строки,  управляющий  файл  считается  макроподстановкой  в  этой
строке.  Ключи  также  являются  позиционно  зависимыми,  хотя  область   их
действия может быть  различной: от непосредственного  управления связыванием
конкретного файла, до влияния на весь создаваемый оверлейный файл.

Если не заданы ключи, меняющие расположение кода в выходном файле (/p и  /d,
см.  ниже),  то  по  умолчанию  генерируется  файл  в  формате  загрузочного
CP/M-файла,  при  этом  сначала  размещаютя  общие  блоки  (COMMON),   затем
сегменты данных, затем кодовые сегменты.

/o	разделить оверлеи.

Все  команды,  заданные  после  этого  ключа,  относятся  к  созданию нового
оверлейного файла. Максимальное число поддерживаемых компановщиком  оверлеев
-- 16. Команда

	mlink input.rel /o input2

приведет к созданию файлов input.com и input2.com в формате загрузки CP/M.

/n	задать имя выходного файла.

Имя выходного файла должно быть задано непосредственно за этим ключом.

/m	(/mx) создать файл  карты загрузки для  оверлея. В случае  ключа /mx
(расширенная карта  загрузки) включается  информация о  модулях для  каждого
обрабатываемого  файла.   Этот  файл   получает  имя  выходного  файла,   но
расширение MAP, и  содержит адреса размещения  сегментов модулей (файлов)  в
памяти.

/y (/yz)	создать файл символов  для оверлея.  Файл  символов содержит
все  найденные  глобальные  метки  с  их  действительными адресами. Ключ /yz
указывает  на  создания  файла  символов  в  формате  эмулятора системы CP/M
Z80MU, и может быть загружен в эмулятор по команде SUBMIT.

/z:[filename]	сгенерировать   файл    символов   для    использования    в
эмуляторе-отладчике  SPM.   Filename  задает  имя  файла символов, если этот
параметр  опущен,  то  выбирается  имя  первого  файла  (любого) в командной
строке (или командном файле).

/s+ /s-	указать на библитечный файл  Все файлы, указанные после ключа  /s+ и
до конца  оверлея (или  до ключа  /s- в  текущем оверлее), рассматриваются в
качестве библиотечных. Из библиотечного файла извлекаются только те  модули,
которые содержат описания внешних символов (public), использованных в  ранее
скомпанованных  модулях  (external).  На  библитечный  файл  налагаются теже
ограничения,  что  и  обычно  --  модули,  содержащие  символы public должны
располагаться после модулей ссылающихся на эти символы (external).

/d:XXXX	задать  адрес  размещения  сегмента  данных.   Все  сегменты данных,
встретившееся  в  модулях  (файлах),  расположенных  в  командной строке, до
этого ключа будут размещены  стандартным образом (сразу после  общих блоков,
которые в свою  очередь, по умолчанию  размещаются с адреса  103h). Для всех
модулей (файлов), расположенных в командной строке после этого ключа (но  до
следующего ключа /d),  сегменты данных будут  размещены в памяти  начиная со
значения  XXXX.  Для  задания  размещения  и  общих  блоков с фиксированного
адреса ключ  /d должен  быть расположен  перед первым  связываемым файлом  в
оверлее.  Сегменты  кодов  будут  размещаться  за  первой областью сегментов
данных.

/p:XXXX	задать адрес размещения сегмента кодов.  Все сегменты кодов  модулей
(файлов),  расположенные  до  этого  ключа,  размещаются  сразу  за   первой
областью  сегментов  данных.  Для  всех  модулей  (файлов),  расположенных в
командной строке  после этого  ключа (но  до следующего  ключа /p), сегменты
кодов будут размещены в памяти начиная со значения XXXX.

/ws:XXXX  (/wb:XXXX)	задать  начальный   адрес  записываемого   фрагмента
кодов оверлея.

/wf:XXXX (/we:XXXX)	задать конечный адрес записываемого фрагмента  кодов
оверлея.   По  умолчанию  в  файл  записываются  все коды, которые размещены
компановщиком, начиная с адреса 100h (как для выполняемых CP/M-файлов),  или
с адреса 0,  если адрес последнего  размещенного компановщиком байта  меньше
103h. Используя  ключи /ws  и /wf  можно выделить  (ограничить) часть кодов,
записываемую в выходной файл.

/u	показать внутренние формат объектного файла.  Этот ключ должен  быть
единственным  в  строке,  на  дисплей  выдаётся  dump содержимого объектного
файла,  указанного  в  командной  строке  непосредственно за ключом. Ключ /u
должен подаваться только из командной строки.

/sb:XXXX	задать  размер  буфера  под  таблицу  символов  (число  XXXX
указывает число символов). На  каждый обрабатываемый компановщиком символ  в
среднем полагается 18 байт.

/sa:XXXX	задать размер  буфера под  таблицу обработки  арифметических
выражений.   В  случае  сообщения  компановщика  о  нехватке  памяти следует
задать большие значения (размер по умолчанию выдается в экране подсказки).

Формат файла символа для эмулятора-отладчика

+Overlay Number

задание  десятичного  номера  оверлея  (считая  с 0). Все последующие строки
принадлежат к этому оверлею.

+OutFileName String

имя выходного файла.

+StartAddress HexNumber

шестнадцатеричный стартовый адрес программы (если присутствует в оверлее).

+CommonBlock HexNumber HexNumber

шестнадцатеричные  адреса  (начала  и  окончания),  используемого  в оверлее
общего блока (если присутствует в оверлее).

+SourceFile String Code_start Code_end Data_start Data_end

задание  параметров  входного  файла,  String  имя  файла,  Code начальный и
конечный шестнадцатеричные адреса кодового сегмента, занимаемого  программой
из  данного  файла  (если  файл  содержит  несколько  кодовых  сегментов, то
указывается  общий   диапазон  адресов,   а  сами   сегменты   распологаются
последовательно).  Data тоже, для сегмента данных.

+SourceRequestFile String

задает имя подгружаемого файла (если таковой есть).

+ModuleName String Code_start Code_end Data_start Data_end

задает параметры, аналогичные таким же для входного файла.

HexNumber Symbol_name

имя символа, HexNumber адрес, Symbol_name имя символа.

Приложения

Коды ошибок, возвращаемых компановщиком

   1 запуск без параметров
   2 нехватает памяти
   4 неверный формат ключа, недопустимый или неизвестный ключ
   5 ошибка создания файла
   6 ошибка открытия файла или слишком много связываемых файлов
   7 ошибка чтения из файла
  11 ошибка работы с арифметическим стеком
  12 ошибка командного файла
  13 неверная запись (неизвестный общий блок)
  14 неверная запись (недопустимый EOF)
  15 неверная запись (общий блок COBOL)
  16 неверная запись (неизвестный расширенный элемент)
  16 неверная запись (выражение типа EXT - const)
  18 неверная запись (обнаружено два main модуля)
  19 повторное определение символа
  20 неопределенная ссылка
  21 неверный размер общего блока
  22 неизвестный сегмент (потерянные данные)
  24 наложение данных в сегментах
  25 наложение сегментов
 100 задано слишком много оверлейных модулей
 101 нет места для вычисления арифметического выражения
 103 нет места для таблицы символов
 104 превышен размер таблицы символов
 120 арифметическое выражение слишком велико
 130 недопустимый код литеры в символе
 140 слишком длинное имя файла
 143 неопределен тип символа (внутренняя  ошибка)
 145 неопределен символ (внутренняя  ошибка)
 200 попытка записи символа в список (внутренняя  ошибка)
 255 ошибка работы b-tree

Изменения

v1.1 (18.07.95)  Исправлены неправильно  работавшие арифметические  операции
для  переменных  внутри  модулей  (не  EXTRN).  Исправлена ошибка вычисления
длины записываемого файла  (раньше, если не  было ключа /wf  записывалось на
256  байт  меньше).  При  генерации  таблицы  символов  в  формате  Z80MU не
выдаются  лишние  строки  определения  байтовых  областей  (BYTE). Увеличено
число поддерживаемых оверлеев до 16.

v2.0 (14.08.95)  Повышена скорость  работы, добавлены  ключи выбора  размера
рабочих буферов для таблиц  символов. Сделана расширенная карта  загрузки. В
управляющем файле возможны  коментарии, разделителем параметров  в командной
строке и файле могут быть запятые.

v2.1  (16.08.95)  Исправлена  ошибка,  непозволявшая  вставлять в коментарии
командного файла русские символы.

v2.2 (06.11.95) Добавлен ключик -z, позволяющий создавать файл символов  для
эмулятора-отладчика SPM.

v2.3 (11.11.95) Добавлено детектирование ОС.

v2.4  (08.12.95)  Исправлена   небольшая  ошибка,  непозволявшая   правильно
обрабатывать  командные  файлы,  содержащие  символы  табуляции.  Существует
демонстрационная  версия   (20.03.96),  в   которой  отсутствует   поддержка
эмулятора SPM, сокращено число оверлеев и недоступен дамп объектных файлов.

v2.5 (04.04.97) Увеличен размер внутреннего стека.

v2.6 (11.05.97) Полное соответствие калькулятору ассемблера.

v2.7 (08.06.98) Введен код возврата программы.
